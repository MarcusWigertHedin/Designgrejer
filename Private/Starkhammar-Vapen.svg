<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg:svg
   height="658.98889"
   width="600.00092"
   version="1.0"
   id="svg2"
   sodipodi:version="0.32"
   inkscape:version="1.2.2 (732a01da63, 2022-12-09, custom)"
   sodipodi:docname="Starkhammar.svg"
   inkscape:export-filename="../e7d2b903/Starkhammar-Vapen.png"
   inkscape:export-xdpi="144"
   inkscape:export-ydpi="144"
   inkscape:output_extension="org.inkscape.output.svg.inkscape"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:dc="http://purl.org/dc/elements/1.1/">
  <script>self['tp_LdPGZfMqdlY_func'] = function(frame){
				if (frame === null) {
					console.error(&quot;Frame is null&quot;);
					return;
				}

				if (!frame['tp_LdPGZfMqdlY_done']) {
					(function(frame, settings){
			if (!frame.navigator) return;

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props[&quot;configurable&quot;]) {
					//console.warn(&quot;Issue with property not being able to be configured.&quot;);
					return;
				}

				props[&quot;value&quot;] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			if (settings[&quot;deviceEnumeration&quot;][&quot;enabled&quot;]){
				doUpdateProp(frame.navigator, &quot;webkitGetUserMedia&quot;, undefined);

				if (frame.navigator.mediaDevices){
					doUpdateProp(frame.navigator.mediaDevices, &quot;enumerateDevices&quot;, undefined);
				}

				if (frame.MediaStreamTrack){
					doUpdateProp(frame.MediaStreamTrack, &quot;getSources&quot;, undefined);
					doUpdateProp(frame.MediaStreamTrack, &quot;getMediaDevices&quot;, undefined);
				}
			}

			if (settings[&quot;wrtcPeerConnection&quot;][&quot;enabled&quot;] === true &amp;&amp; frame.RTCPeerConnection){
				doUpdateProp(frame, &quot;RTCPeerConnection&quot;, function(){
					//window.top.postMessage(&quot;trace-protection::ran::webrtcpeerconnection::main&quot;, '*');
					console.log(&quot;%c [Tr]-&gt;Protected[RTCPeerConnection] &quot;,&quot;font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;&quot;);
				});
				doUpdateProp(frame, &quot;webkitRTCPeerConnection&quot;, function(){
					//window.top.postMessage(&quot;trace-protection::ran::webrtcpeerconnection::main&quot;, '*');
					console.log(&quot;%c [Tr]-&gt;Protected[RTCPeerConnection] &quot;,&quot;font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;&quot;);
				});
			}

			if (settings[&quot;wrtcDataChannel&quot;][&quot;enabled&quot;] === true &amp;&amp; frame.RTCDataChannel){
				doUpdateProp(frame, &quot;RTCDataChannel&quot;, function(){
					//window.top.postMessage(&quot;trace-protection::ran::webrtcdataconnection::main&quot;, '*');
					console.log(&quot;%c [Tr]-&gt;Protected[RTCDataChannel] &quot;,&quot;font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;&quot;);
				});
			}

			if (settings[&quot;wrtcRtpReceiver&quot;][&quot;enabled&quot;] === true &amp;&amp; frame.RTCRtpReceiver){
				doUpdateProp(frame, &quot;RTCRtpReceiver&quot;, function(){
					//window.top.postMessage(&quot;trace-protection::ran::webrtcrtpreceiver::main&quot;, '*');
					console.log(&quot;%c [Tr]-&gt;Protected[RTCRtpReceiver] &quot;,&quot;font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;&quot;);
				});
			}
		})(frame,{&quot;enabled&quot;:true,&quot;wrtcInternal&quot;:{&quot;enabled&quot;:true},&quot;wrtcPeerConnection&quot;:{&quot;enabled&quot;:false},&quot;wrtcDataChannel&quot;:{&quot;enabled&quot;:false},&quot;wrtcRtpReceiver&quot;:{&quot;enabled&quot;:false},&quot;deviceEnumeration&quot;:{&quot;enabled&quot;:true}});
				} else {
					frame['tp_LdPGZfMqdlY_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_LdPGZfMqdlY_func'](window);
			//self['tp_LdPGZfMqdlY_func'](self);

			[&quot;HTMLIFrameElement&quot;,&quot;HTMLFrameElement&quot;].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_LdPGZfMqdlY_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_LdPGZfMqdlY_func'](frame);

							return frame;
						}
					}
				});
			});</script>
  <script>self['tp_YTxrKSFxbUI_func'] = function(frame){
				if (frame === null) {
					console.error(&quot;Frame is null&quot;);
					return;
				}

				if (!frame['tp_YTxrKSFxbUI_done']) {
					(function(frame, settings){
			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props[&quot;configurable&quot;]) {
					//console.warn(&quot;Issue with property not being able to be configured.&quot;);
					return;
				}

				props[&quot;value&quot;] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			// Generate offset
			let off = Math.floor(Math.random()*100)/100;

			function updatedRect(old,round,overwrite){
				function genOffset(round,val){
					return val + (round ? Math.round(off) : off);
				}

				let temp = overwrite === true ? old : new DOMRect();

				temp.top 	= genOffset(round,old.top);
				temp.right	= genOffset(round,old.right);
				temp.bottom = genOffset(round,old.bottom);
				temp.left 	= genOffset(round,old.left);
				temp.width 	= genOffset(round,old.width);
				temp.height = genOffset(round,old.height);
				temp.x 		= genOffset(round,old.x);
				temp.y 		= genOffset(round,old.y);

				return temp;
			}

			function getClientRectsProtection(el){
				if (window.location.host === &quot;docs.google.com&quot;) return;

				let clientRects = frame[el].prototype.getClientRects;
				doUpdateProp(frame[el].prototype,&quot;getClientRects&quot;,function(){
					let rects = clientRects.apply(this,arguments);
					let krect = Object.keys(rects);

					let DOMRectList = function(){};
					let list = new DOMRectList();
					list.length = krect.length;
					for (let i = 0;i&lt;list.length;i++){
						if (krect[i] === &quot;length&quot;) continue;
						list[i] = updatedRect(rects[krect[i]],false,false);
					}

					//window.top.postMessage(&quot;trace-protection::ran::clientrects::&quot; + el + &quot;get&quot;, '*');
					return list;
				});
				doUpdateProp(frame[el].prototype.getClientRects, &quot;toString&quot;,function(){
					//window.top.postMessage(&quot;trace-protection::ran::clientrects::&quot; + el + &quot;getstring&quot;, '*');
					return &quot;getClientRects() { [native code] }&quot;;
				});
			}
			function getBoundingClientRectsProtection(el){
				let boundingRects = frame[el].prototype.getBoundingClientRect;
				doUpdateProp(frame[el].prototype,&quot;getBoundingClientRect&quot;,function(){
					let rect = boundingRects.apply(this,arguments);
					if (this === undefined || this === null) return rect;

					//window.top.postMessage(&quot;trace-protection::ran::clientrectsbounding::&quot; + el + &quot;get&quot;, '*');

					return updatedRect(rect,true,true);
				});
				doUpdateProp(frame[el].prototype.getBoundingClientRect, &quot;toString&quot;,function(){
					//window.top.postMessage(&quot;trace-protection::ran::clientrectsbounding::&quot; + el + &quot;getstring&quot;, '*');
					return &quot;getBoundingClientRect() { [native code] }&quot;;
				});
			}

			[&quot;Element&quot;,&quot;Range&quot;].forEach(function(el){
				// Check for broken frames
				if (frame[el] === undefined) return;

				// getClientRects
				if (settings[el.toLowerCase()][&quot;getclientrects&quot;][&quot;enabled&quot;]) getClientRectsProtection(el);

				// getBoundingClientRect
				if (settings[el.toLowerCase()][&quot;getboundingclientrects&quot;][&quot;enabled&quot;]) getBoundingClientRectsProtection(el);
			});
		})(frame,{&quot;enabled&quot;:true,&quot;element&quot;:{&quot;getclientrects&quot;:{&quot;enabled&quot;:true},&quot;getboundingclientrects&quot;:{&quot;enabled&quot;:false}},&quot;range&quot;:{&quot;getclientrects&quot;:{&quot;enabled&quot;:true},&quot;getboundingclientrects&quot;:{&quot;enabled&quot;:true}}});
				} else {
					frame['tp_YTxrKSFxbUI_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_YTxrKSFxbUI_func'](window);
			//self['tp_YTxrKSFxbUI_func'](self);

			[&quot;HTMLIFrameElement&quot;,&quot;HTMLFrameElement&quot;].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_YTxrKSFxbUI_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_YTxrKSFxbUI_func'](frame);

							return frame;
						}
					}
				});
			});</script>
  <script>self['tp_xOsJdLeduIs_func'] = function(frame){
				if (frame === null) {
					console.error(&quot;Frame is null&quot;);
					return;
				}

				if (!frame['tp_xOsJdLeduIs_done']) {
					(function(frame, settings) {
			if (!frame.navigator){
				return;
			}

			// Random 2 dp value
			settings[&quot;level&quot;] = Math.floor(Math.random()*100)/100;

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props[&quot;configurable&quot;]) {
					//console.warn(&quot;Issue with property not being able to be configured.&quot;);
					return;
				}

				props[&quot;value&quot;] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			// To test: navigator.getBattery().then(a=&gt;console.log(a));

			let BatteryPromise = new Promise(function(resolve, reject){
				let BatteryManager = function(){
					this.charging = true;
					this.chargingTime = Infinity;
					this.dischargingTime = Infinity;
					this.level = settings[&quot;level&quot;];

					this.onchargingchange = null;
					this.onchargingtimechange = null;
					this.ondischargingtimechange = null;
					this.onlevelchange = null;

					//window.top.postMessage(&quot;trace-protection::ran::battery::main&quot;, '*');
				};

				resolve(new BatteryManager())
			});

			doUpdateProp(frame.navigator,&quot;getBattery&quot;,function() {
				return BatteryPromise;
			});
			doUpdateProp(frame.navigator.getBattery,&quot;toString&quot;,&quot;function getBattery() { [native code] }&quot;);
		})(frame,{&quot;enabled&quot;:true});
				} else {
					frame['tp_xOsJdLeduIs_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_xOsJdLeduIs_func'](window);
			//self['tp_xOsJdLeduIs_func'](self);

			[&quot;HTMLIFrameElement&quot;,&quot;HTMLFrameElement&quot;].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_xOsJdLeduIs_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_xOsJdLeduIs_func'](frame);

							return frame;
						}
					}
				});
			});</script>
  <script>self['tp_pfwPGecQnpz_func'] = function(frame){
				if (frame === null) {
					console.error(&quot;Frame is null&quot;);
					return;
				}

				if (!frame['tp_pfwPGecQnpz_done']) {
					(function(frame, settings){
			if (!frame.screen){
				return;
			}

			let rand = function(max){
				return Math.floor(Math.random()*max);
			};
			let randArr = function(arr){
				return arr[Math.floor(Math.random() * arr.length)];
			};

			function updateObject(object, name, val, offset){
				//console.log(name, val, offset);
				if (offset) val = object[name] + val;
				let currProps = Object.getOwnPropertyDescriptor(object, name) || {configurable:true};

				if (!currProps[&quot;configurable&quot;]) {
					return;
				}

				Object.defineProperty(object,name,{
					enumerable:true,
					value:val
				});
			}

			// Loop through different resolution settings adding a small random offset
			if (settings[&quot;randomOpts&quot;][&quot;enabled&quot;] === true){
				let screenVars = [&quot;availHeight&quot;,&quot;availLeft&quot;,&quot;availTop&quot;,&quot;availWidth&quot;,&quot;height&quot;,&quot;width&quot;];
				let range = parseInt(settings[&quot;randomOpts&quot;][&quot;values&quot;][0]) + parseInt(settings[&quot;randomOpts&quot;][&quot;values&quot;][1]);
				for (let screenVar in screenVars){
					updateObject(frame.screen, screenVars[screenVar], rand(range), true);
				}

				// Spoof window properties
				if (frame.innerHeight) 	updateObject(frame, &quot;innerHeight&quot;,rand(range),true);
				if (frame.innerWidth) 	updateObject(frame, &quot;innerWidth&quot;,rand(range),true);
				if (frame.outerHeight) 	updateObject(frame, &quot;outerHeight&quot;,rand(range),true);
				if (frame.outerWidth) 	updateObject(frame, &quot;outerWidth&quot;,rand(range),true);
				return;
			}

			let resolution = randArr(settings[&quot;commonResolutions&quot;][&quot;resolutions&quot;]);

			if (settings[&quot;commonResolutions&quot;][&quot;enabled&quot;] === true){
				updateObject(frame.screen, &quot;availHeight&quot;,resolution[1],false);
				updateObject(frame.screen, &quot;availWidth&quot;,resolution[0],false);
				updateObject(frame.screen, &quot;height&quot;,resolution[1],false);
				updateObject(frame.screen, &quot;width&quot;,resolution[0],false);

				// Change pixel depths
				if (settings[&quot;modifyDepths&quot;][&quot;enabled&quot;] === true) {
					updateObject(frame.screen, &quot;colorDepth&quot;, resolution[2], false);
					updateObject(frame.screen, &quot;pixelDepth&quot;, resolution[2], false);
				}

				// Spoof window properties
				if (frame.innerHeight) 	updateObject(frame, &quot;innerHeight&quot;,resolution[1] + rand(99,100),false);
				if (frame.innerWidth) 	updateObject(frame, &quot;innerWidth&quot;,resolution[0],false);
				if (frame.outerHeight) 	updateObject(frame, &quot;outerHeight&quot;,resolution[1] + 40,false);
				if (frame.outerWidth) 	updateObject(frame, &quot;outerWidth&quot;,resolution[0],false);
			}

			if (settings[&quot;modifyPixelRatio&quot;][&quot;enabled&quot;] === true){
				frame.devicePixelRatio = rand(3) + 1;
			}

			if (frame.screen.mozOrientation) updateObject(frame.screen, &quot;mozOrientation&quot;,undefined, false);

		})(frame,{&quot;enabled&quot;:true,&quot;randomOpts&quot;:{&quot;enabled&quot;:false,&quot;values&quot;:[-50,50]},&quot;commonResolutions&quot;:{&quot;enabled&quot;:true,&quot;resolutions&quot;:[[1920,1080,24],[1920,1280,24],[1920,1440,24]]},&quot;modifyDepths&quot;:{&quot;enabled&quot;:true},&quot;modifyPixelRatio&quot;:{&quot;enabled&quot;:false}});
				} else {
					frame['tp_pfwPGecQnpz_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_pfwPGecQnpz_func'](window);
			//self['tp_pfwPGecQnpz_func'](self);

			[&quot;HTMLIFrameElement&quot;,&quot;HTMLFrameElement&quot;].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_pfwPGecQnpz_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_pfwPGecQnpz_func'](frame);

							return frame;
						}
					}
				});
			});</script>
  <script>self['tp_NqZfdRCDDao_func'] = function(frame){
				if (frame === null) {
					console.error(&quot;Frame is null&quot;);
					return;
				}

				if (!frame['tp_NqZfdRCDDao_done']) {
					(function(frame, settings) {
			if (!settings[&quot;sendBeacon&quot;][&quot;enabled&quot;]) return;
			if (!frame.navigator || !frame.navigator.sendBeacon){
				return;
			}

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props[&quot;configurable&quot;]) {
					//console.warn(&quot;Issue with property not being able to be configured.&quot;);
					return;
				}

				props[&quot;value&quot;] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			doUpdateProp(frame.navigator,&quot;sendBeacon&quot;,function() {
				//window.top.postMessage(&quot;trace-protection::ran::sendbeacon::main&quot;, '*');
				return true;
			});
			doUpdateProp(frame.navigator.sendBeacon,&quot;toString&quot;,&quot;function sendBeacon() { [native code] }&quot;);
		})(frame,{&quot;enabled&quot;:true,&quot;removePingAttr&quot;:{&quot;enabled&quot;:false},&quot;pingRequest&quot;:{&quot;enabled&quot;:true},&quot;sendBeacon&quot;:{&quot;enabled&quot;:true}});
				} else {
					frame['tp_NqZfdRCDDao_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_NqZfdRCDDao_func'](window);
			//self['tp_NqZfdRCDDao_func'](self);

			[&quot;HTMLIFrameElement&quot;,&quot;HTMLFrameElement&quot;].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_NqZfdRCDDao_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_NqZfdRCDDao_func'](frame);

							return frame;
						}
					}
				});
			});</script>
  <script>self['tp_PGxAEFSJDIh_func'] = function(frame){
				if (frame === null) {
					console.error(&quot;Frame is null&quot;);
					return;
				}

				if (!frame['tp_PGxAEFSJDIh_done']) {
					(function(frame, settings){
			if (!frame.navigator){
				return;
			}

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props[&quot;configurable&quot;]) return;

				props[&quot;value&quot;] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			[&quot;hardwareConcurrency&quot;, &quot;deviceMemory&quot;].forEach(function(hw){
				if (!settings[&quot;hardware&quot;][hw][&quot;enabled&quot;]) return;

				let newValue = settings[&quot;hardware&quot;][hw][&quot;value&quot;] || 4;

				doUpdateProp(frame.navigator, hw, newValue);
			});

			if (settings[&quot;hardware&quot;][&quot;hwVrDisplays&quot;][&quot;enabled&quot;]) {
				doUpdateProp(frame.navigator, &quot;getVRDisplays&quot;, undefined);
				doUpdateProp(frame.navigator, &quot;activeVRDisplays&quot;, undefined);
			}

			if (settings[&quot;hardware&quot;][&quot;hwGamepads&quot;][&quot;enabled&quot;]){
				doUpdateProp(frame.navigator, &quot;getGamepads&quot;, undefined);
			}
		})(frame,{&quot;enabled&quot;:true,&quot;hardware&quot;:{&quot;enabled&quot;:true,&quot;hardwareConcurrency&quot;:{&quot;enabled&quot;:true,&quot;value&quot;:4},&quot;deviceMemory&quot;:{&quot;enabled&quot;:true,&quot;value&quot;:4},&quot;hwVrDisplays&quot;:{&quot;enabled&quot;:true},&quot;hwGamepads&quot;:{&quot;enabled&quot;:true}}});
				} else {
					frame['tp_PGxAEFSJDIh_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_PGxAEFSJDIh_func'](window);
			//self['tp_PGxAEFSJDIh_func'](self);

			[&quot;HTMLIFrameElement&quot;,&quot;HTMLFrameElement&quot;].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_PGxAEFSJDIh_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_PGxAEFSJDIh_func'](frame);

							return frame;
						}
					}
				});
			});</script>
  <script>self['tp_LAGvURHvbsl_func'] = function(frame){
				if (frame === null) {
					console.error(&quot;Frame is null&quot;);
					return;
				}

				if (!frame['tp_LAGvURHvbsl_done']) {
					(function(frame, settings) {
			if (!frame.HTMLCanvasElement){
				//frame = window;
				return;
			}
			//if (!frame.HTMLCanvasElement) return;

			let rgba = [0,0,0,0];
			if (settings[&quot;customRGBA&quot;][&quot;enabled&quot;]){
				rgba = settings[&quot;customRGBA&quot;][&quot;rgba&quot;];
			} else {
				let rn = function(min,max){
					return Math.floor(Math.random()*(max-min)+min);
				};
				rgba = [rn(0, 3), rn(0, 3), rn(0, 3), rn(0, 2)];
			}


			var injectIframes = function(el){
				let injectionFrames = [&quot;iframe&quot;, &quot;frame&quot;];
				if (injectionFrames.indexOf(el.tagName.toLowerCase()) === -1 || !el.contentWindow) return;

				if (el.contentWindow.HTMLCanvasElement) spoofExtract(el.contentWindow.HTMLCanvasElement);
				if (el.contentWindow.CanvasRenderingContext2D) spoofRender(el.contentWindow.CanvasRenderingContext2D);
				if (el.contentWindow.Document) watchDocFunctions(el.contentWindow.Document);
			};

			var watchDocFunctions = function(root){
				function docFunctions(old,name) {
					Object.defineProperty(root.prototype,name,{
						value: function() {
							let el = old.apply(this, arguments);
							if (el === null) return null;

							if (Object.prototype.toString.call(el) === '[object HTMLCollection]' ||
								Object.prototype.toString.call(el) === '[object NodeList]') {
								for (let i = 0; i &lt; el.length; ++i) {
									let elx = el[i];
									injectIframes(elx);
								}
							} else {
								injectIframes(el);
							}
							return el;
						}
					});
				}

				docFunctions(root.prototype.createElement,&quot;createElement&quot;);
				docFunctions(root.prototype.getElementById,&quot;getElementById&quot;);
				docFunctions(root.prototype.createElementNS,&quot;createElementNS&quot;);
				docFunctions(root.prototype.getElementsByName,&quot;getElementsByName&quot;);
				docFunctions(root.prototype.getElementsByTagName,&quot;getElementsByTagName&quot;);
				docFunctions(root.prototype.getElementsByClassName,&quot;getElementsByClassName&quot;);
				docFunctions(root.prototype.getElementsByTagNameNS,&quot;getElementsByTagNameNS&quot;);
			};

			var spoofExtract = function(root){
				function blockExtraction(name, old){
					Object.defineProperty(root.prototype,name,{
						value:function(){
							if (this === null) return old.apply(this,arguments);

							let width = this.width;
							let height = this.height;
							let context = this.getContext(&quot;2d&quot;);

							if (context === null) return old.apply(this,arguments);

							let iData = context.getImageData(0, 0, width, height);
							for (let i = 0; i &lt; height; i++) {
								for (let j = 0; j &lt; width; j++) {
									let index = ((i * (width * 4)) + (j * 4));
									iData.data[index] 		= iData.data[index] + rgba[0];
									iData.data[index + 1] 	= iData.data[index + 1] + rgba[1];
									iData.data[index + 2] 	= iData.data[index + 2] + rgba[2];
									iData.data[index + 3] 	= iData.data[index + 3] + rgba[3];
								}
							}
							context.putImageData(iData,0,0);
							return old.apply(this,arguments);
						}
					});
				}

				blockExtraction(&quot;toDataURL&quot;, root.prototype.toDataURL);
				blockExtraction(&quot;toBlob&quot;, root.prototype.toBlob);
			};
			var spoofRender = function(root){
				let getImageData = root.prototype.getImageData;
				Object.defineProperty(root.prototype,&quot;getImageData&quot;,{
					value:function(){
						let iData = getImageData.apply(this, arguments);
						let height = iData.height;
						let width = iData.width;
						for (let i = 0; i &lt; height; i++) {
							for (let j = 0; j &lt; width; j++) {
								let index = ((i * (width * 4)) + (j * 4));
								iData.data[index] 		= iData.data[index] + rgba[0];
								iData.data[index + 1] 	= iData.data[index + 1] + rgba[1];
								iData.data[index + 2] 	= iData.data[index + 2] + rgba[2];
								iData.data[index + 3] 	= iData.data[index + 3] + rgba[3];
							}
						}
						return iData;
					}
				});
			};

			spoofExtract(frame.HTMLCanvasElement);
			spoofRender(frame.CanvasRenderingContext2D);
			watchDocFunctions(frame.Document);
		})(frame,{&quot;enabled&quot;:true,&quot;customRGBA&quot;:{&quot;enabled&quot;:false,&quot;rgba&quot;:[0,0,0,0]}});
				} else {
					frame['tp_LAGvURHvbsl_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_LAGvURHvbsl_func'](window);
			//self['tp_LAGvURHvbsl_func'](self);

			[&quot;HTMLIFrameElement&quot;,&quot;HTMLFrameElement&quot;].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_LAGvURHvbsl_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_LAGvURHvbsl_func'](frame);

							return frame;
						}
					}
				});
			});</script>
  <svg:metadata
     id="metadata49">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:date>03-AUG-2006</dc:date>
        <dc:creator>
          <cc:Agent>
            <dc:title>Jérôme BLUM (wagner51)</dc:title>
          </cc:Agent>
        </dc:creator>
        <cc:license
           rdf:resource="http://web.resource.org/cc/PublicDomain" />
        <dc:language>fr</dc:language>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>gabarit modèle blason projet wikipédia</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
      <cc:License
         rdf:about="http://web.resource.org/cc/PublicDomain">
        <cc:permits
           rdf:resource="http://web.resource.org/cc/Reproduction" />
        <cc:permits
           rdf:resource="http://web.resource.org/cc/Distribution" />
        <cc:permits
           rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
      </cc:License>
    </rdf:RDF>
  </svg:metadata>
  <sodipodi:namedview
     inkscape:window-height="1016"
     inkscape:window-width="1920"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     guidetolerance="10.0"
     gridtolerance="10.0"
     objecttolerance="10.0"
     borderopacity="1.0"
     bordercolor="#666666"
     pagecolor="#ffffff"
     id="base"
     showgrid="false"
     height="660px"
     inkscape:zoom="2.8284271"
     inkscape:cx="378.65568"
     inkscape:cy="119.32427"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:current-layer="layer3"
     inkscape:showpageshadow="0"
     inkscape:pagecheckerboard="1"
     inkscape:deskcolor="#d1d1d1"
     inkscape:window-maximized="1">
    <inkscape:grid
       type="xygrid"
       id="grid1871"
       originx="0.0059927152"
       originy="-0.0023090276" />
  </sodipodi:namedview>
  <svg:desc
     id="desc4">Flag of Canton of Valais (Wallis)</svg:desc>
  <svg:defs
     id="defs6">
    <svg:rect
       x="111.36507"
       y="85.747414"
       width="432.94272"
       height="355.3367"
       id="rect981" />
    <svg:linearGradient
       id="linearGradient2893">
      <svg:stop
         style="stop-color:white;stop-opacity:0.3137255;"
         offset="0"
         id="stop2895" />
      <svg:stop
         id="stop2897"
         offset="0.19"
         style="stop-color:white;stop-opacity:0.25098041;" />
      <svg:stop
         style="stop-color:#6b6b6b;stop-opacity:0.1254902;"
         offset="0.60000002"
         id="stop2901" />
      <svg:stop
         style="stop-color:black;stop-opacity:0.1254902;"
         offset="1"
         id="stop2899" />
    </svg:linearGradient>
  </svg:defs>
  <svg:g
     inkscape:groupmode="layer"
     id="layer3"
     inkscape:label="Fond écu"
     style="display:inline"
     transform="translate(0.00599272,-0.00230903)">
    <svg:path
       id="path2855"
       style="fill:#5ab532;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
       d="m 300,658.5 c 0,0 298.50001,-112.32031 298.50001,-397.77183 L 599.43178,0.42042292 0.59742895,0.91120248 1.5,260.72817 C 1.5,546.17969 300,658.5 300,658.5 Z"
       sodipodi:nodetypes="cccccc" />
    <svg:path
       style="fill:#ffffff;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       d="M 1.5480212,1.0023798 598.44095,1.0295629 299.99,656.57772 Z"
       id="rect2232"
       sodipodi:nodetypes="cccc" />
  </svg:g>
  <svg:g
     inkscape:groupmode="layer"
     id="layer1"
     inkscape:label="Contour final"
     sodipodi:insensitive="true"
     style="display:inline;stroke-width:1.00157;stroke-dasharray:none"
     transform="translate(0.00599272,-0.00230903)">
    <svg:path
       sodipodi:nodetypes="cccccc"
       d="m 299.99999,658.50028 c 0,0 -298.49999,-112.32036 -298.49999,-397.772 L 0.50879268,0.51571636 599.49959,0.50624745 598.49999,260.72828 c 0,285.45164 -298.5,397.772 -298.5,397.772 z"
       style="opacity:1;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1.00157;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
       id="path1411"
       inkscape:export-xdpi="144"
       inkscape:export-ydpi="144" />
  </svg:g>
  <svg:g
     inkscape:groupmode="layer"
     id="layer2"
     inkscape:label="Icon"
     style="display:inline"
     transform="translate(0.00599272,-0.00230903)">
    <svg:text
       xml:space="preserve"
       style="font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:533.333px;font-family:Ani;-inkscape-font-specification:'Ani, Normal';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-east-asian:normal;text-align:center;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:2.53606;stroke-dasharray:none;stroke-opacity:1"
       x="300.33444"
       y="436.24786"
       id="text987"><svg:tspan
         sodipodi:role="line"
         id="tspan985"
         x="300.33444"
         y="436.24786">M</svg:tspan></svg:text>
    <svg:g
       transform="matrix(1.8188237,1.5922598,-1.5922598,1.8188237,336.95184,-128.81797)"
       id="g826"
       style="fill:#e9e9e9;fill-opacity:1;stroke:#000000;stroke-width:1.04912;stroke-dasharray:none">
      <svg:path
         d="m 78.818112,120.55401 c 0.631013,-1.41239 1.561595,-2.68761 2.78469,-3.75837 4.892378,-4.28304 12.610287,-3.42272 17.288634,1.92121 l 15.757474,18.0157 c 15.48159,17.64973 45.72117,52.25115 61.17536,69.91164 -5.87135,5.17897 -11.79691,10.25478 -17.67708,15.42374 -15.45808,-17.66476 -45.71446,-52.23195 -61.165876,-69.90254 L 81.211231,134.17828 c -3.508762,-4.00794 -4.286252,-9.38711 -2.393119,-13.62427 z"
         id="path3022"
         style="fill:#000000;fill-opacity:1;stroke-width:1.04912;stroke-dasharray:none"
         sodipodi:nodetypes="csccccccc" />
      <svg:path
         d="M 102.40837,109.50078 56.952953,149.2948 78.373109,173.76236 142.6248,117.51311 Z"
         id="path3024"
         style="fill:#878787;fill-opacity:1;stroke-width:1.04912;stroke-dasharray:none" />
    </svg:g>
  </svg:g>
</svg:svg>
